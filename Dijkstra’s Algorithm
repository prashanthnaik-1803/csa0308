#include <stdio.h>
#define INF 9999
#define MAX 20

void dijkstra(int graph[MAX][MAX], int n, int start) {
    int dist[MAX], visited[MAX], parent[MAX];
    
    for (int i = 0; i < n; i++) {
        dist[i] = INF;
        visited[i] = 0;
        parent[i] = -1;
    }

    dist[start] = 0;

    for (int count = 0; count < n - 1; count++) {
        int min = INF, u = -1;

        // Find the unvisited vertex with the smallest distance
        for (int i = 0; i < n; i++) {
            if (!visited[i] && dist[i] < min) {
                min = dist[i];
                u = i;
            }
        }

        if (u == -1) break; // no reachable vertex

        visited[u] = 1;

        // Relax neighbors
        for (int v = 0; v < n; v++) {
            if (graph[u][v] && !visited[v] && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u;
            }
        }
    }

    // Print shortest paths
    printf("Vertex\tDistance\tPath");
    for (int i = 0; i < n; i++) {
        if (i != start) {
            printf("\n%d -> %d\t%d\t\t%d", start, i, dist[i], i);
            int j = i;
            while (parent[j] != -1) {
                printf(" <- %d", parent[j]);
                j = parent[j];
            }
        }
    }
    printf("\n");
}

int main() {
    int n, start;
    int graph[MAX][MAX];

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter adjacency matrix (0 if no edge):\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    printf("Enter starting vertex (0 to %d): ", n - 1);
    scanf("%d", &start);

    dijkstra(graph, n, start);

    return 0;
}
