#include <stdio.h>
#define SIZE 10   // Hash table size

int hashTable[SIZE];

// Initialize hash table
void init() {
    for (int i = 0; i < SIZE; i++)
        hashTable[i] = -1;   // -1 means empty
}

// Hash function
int hash(int key) {
    return key % SIZE;
}

// Insert using linear probing
void insert(int key) {
    int index = hash(key);
    int start = index;

    while (hashTable[index] != -1) {
        index = (index + 1) % SIZE;
        if (index == start) {
            printf("Hash Table is full!\n");
            return;
        }
    }
    hashTable[index] = key;
    printf("%d inserted at index %d\n", key, index);
}

// Search using linear probing
int search(int key) {
    int index = hash(key);
    int start = index;

    while (hashTable[index] != -1) {
        if (hashTable[index] == key)
            return index;
        index = (index + 1) % SIZE;
        if (index == start)
            return -1;  // searched entire table
    }
    return -1;
}

// Display hash table
void display() {
    printf("\nHash Table:\n");
    for (int i = 0; i < SIZE; i++) {
        if (hashTable[i] != -1)
            printf("[%d] --> %d\n", i, hashTable[i]);
        else
            printf("[%d] --> EMPTY\n", i);
    }
}

int main() {
    int choice, key;
    init();

    while (1) {
        printf("\n--- Hash Table Menu ---\n");
        printf("1. Insert\n2. Search\n3. Display\n4. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            printf("Enter key to insert: ");
            scanf("%d", &key);
            insert(key);
            break;
        case 2:
            printf("Enter key to search: ");
            scanf("%d", &key);
            int pos;
            pos = search(key);
            if (pos != -1)
                printf("Key %d found at index %d\n", key, pos);
            else
                printf("Key %d not found!\n", key);
            break;
        case 3:
            display();
            break;
        case 4:
            return 0;
        default:
            printf("Invalid choice!\n");
        }
    }
}
