#include <stdio.h>
#include <stdlib.h>

#define MAX 30

// Structure for edges
struct Edge {
    int u, v, w;
};

// Find parent (with path compression)
int find(int parent[], int i) {
    if (parent[i] != i)
        parent[i] = find(parent, parent[i]);
    return parent[i];
}

// Union of two sets
void unionSets(int parent[], int rank[], int x, int y) {
    int rootX = find(parent, x);
    int rootY = find(parent, y);

    if (rank[rootX] < rank[rootY])
        parent[rootX] = rootY;
    else if (rank[rootX] > rank[rootY])
        parent[rootY] = rootX;
    else {
        parent[rootY] = rootX;
        rank[rootX]++;
    }
}

// Kruskal's Algorithm
void kruskal(struct Edge edges[], int n, int e) {
    int parent[MAX], rank[MAX];
    struct Edge result[MAX]; // Store MST edges
    int i = 0, j = 0, totalCost = 0;

    // Initialize disjoint sets
    for (int v = 0; v < n; v++) {
        parent[v] = v;
        rank[v] = 0;
    }

    // Sort edges by weight (Bubble Sort for simplicity)
    for (i = 0; i < e - 1; i++) {
        for (j = 0; j < e - i - 1; j++) {
            if (edges[j].w > edges[j + 1].w) {
                struct Edge temp = edges[j];
                edges[j] = edges[j + 1];
                edges[j + 1] = temp;
            }
        }
    }

    i = 0; // index for sorted edges
    j = 0; // index for result[]

    while (i < e && j < n - 1) {
        struct Edge nextEdge = edges[i++];
        int x = find(parent, nextEdge.u);
        int y = find(parent, nextEdge.v);

        if (x != y) { // no cycle
            result[j++] = nextEdge;
            unionSets(parent, rank, x, y);
        }
    }

    printf("Edge\tWeight\n");
    for (i = 0; i < j; i++) {
        printf("%d - %d\t%d\n", result[i].u, result[i].v, result[i].w);
        totalCost += result[i].w;
    }
    printf("Total cost of MST = %d\n", totalCost);
}

int main() {
    int n, e;
    struct Edge edges[MAX];

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter number of edges: ");
    scanf("%d", &e);

    printf("Enter edges (u v w):\n");
    for (int i = 0; i < e; i++) {
        scanf("%d%d%d", &edges[i].u, &edges[i].v, &edges[i].w);
    }

    kruskal(edges, n, e);

    return 0;
}
